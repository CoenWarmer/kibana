/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useEffect, useState } from 'react';
import { i18n } from '@kbn/i18n';
import {
  EuiButton,
  EuiFlexGroup,
  EuiFlexItem,
  EuiFormRow,
  EuiPanel,
  EuiSelect,
  EuiSpacer,
  EuiTab,
  EuiTabs,
  EuiText,
  EuiTitle,
} from '@elastic/eui';
import { useAppContext } from '../../app_context';

export function SettingsPage() {
  const { setBreadcrumbs, navigateToApp, serverless } = useAppContext();

  useEffect(() => {
    if (serverless) {
      serverless.setBreadcrumbs([
        {
          text: i18n.translate(
            'aiAssistantManagmentObservability.breadcrumb.serverless.observability',
            {
              defaultMessage: 'AI Assistant for Observability Settings',
            }
          ),
        },
      ]);
    } else {
      setBreadcrumbs([
        {
          text: i18n.translate('aiAssistantManagmentObservability.breadcrumb.index', {
            defaultMessage: 'AI Assistants',
          }),
          onClick: (e) => {
            e.preventDefault();
            navigateToApp('management', { path: '/kibana/aiAssistantManagement' });
          },
        },
        {
          text: i18n.translate('aiAssistantManagmentObservability.breadcrumb.observability', {
            defaultMessage: 'Observability',
          }),
        },
      ]);
    }
  }, [navigateToApp, serverless, setBreadcrumbs]);

  const handleNavigateToConnectors = () => {
    navigateToApp('management', {
      path: '/insightsAndAlerting/triggersActionsConnectors/connectors',
    });
  };

  const tabs = [
    {
      id: 'settings',
      name: i18n.translate('aiAssistantManagement.settingsPage.settingsLabel', {
        defaultMessage: 'Settings',
      }),
      content: (
        <EuiPanel hasBorder grow={false}>
          <EuiFlexGroup direction="row" alignItems="center">
            <EuiFlexItem>
              <EuiTitle size="xxs">
                <h4>
                  {i18n.translate('aiAssistantManagement.settingsPage.connectorSettingsLabel', {
                    defaultMessage: 'Connector settings',
                  })}
                </h4>
              </EuiTitle>
            </EuiFlexItem>
            <EuiFlexItem>
              <div css={{ marginLeft: 'auto' }}>
                <EuiButton onClick={handleNavigateToConnectors}>
                  {i18n.translate('aiAssistantManagement.settingsPage.goToConnectorsButtonLabel', {
                    defaultMessage: 'Go to connectors',
                  })}
                </EuiButton>
              </div>
            </EuiFlexItem>
          </EuiFlexGroup>

          <EuiSpacer size="l" />

          <EuiFlexGroup direction="row" alignItems="center">
            <EuiFlexItem>
              <EuiTitle size="xxs">
                <h4>
                  {i18n.translate(
                    'aiAssistantManagement.settingsPage.h4.selectDefaultConnectorLabel',
                    { defaultMessage: 'Select default connector' }
                  )}
                </h4>
              </EuiTitle>

              <EuiSpacer size="xs" />

              <EuiText size="xs">
                {i18n.translate(
                  'aiAssistantManagement.settingsPage.connectYourElasticAITextLabel',
                  {
                    defaultMessage:
                      'Connect your Elastic AI Assistant to an external generative AI provider. You can then interact with the data generated by the third-party provider.',
                  }
                )}
              </EuiText>
            </EuiFlexItem>
            <EuiFlexItem>
              <EuiFormRow
                label={i18n.translate('aiAssistantManagement.settingsPage.selectConnectorLabel', {
                  defaultMessage: 'Select connector',
                })}
              >
                <EuiSelect
                  id={'generativeAIProvider'}
                  options={[]}
                  value={''}
                  onChange={(e) => {}}
                  aria-label={i18n.translate(
                    'aiAssistantManagement.settingsPage.euiSelect.generativeAIProviderLabel',
                    { defaultMessage: 'Generative AI provider' }
                  )}
                />
              </EuiFormRow>
            </EuiFlexItem>
          </EuiFlexGroup>
        </EuiPanel>
      ),
    },
    {
      id: 'kb',
      name: i18n.translate('aiAssistantManagement.settingsPage.knowledgeBaseLabel', {
        defaultMessage: 'Knowledge base',
      }),
      content: (
        <>
          <EuiText />
        </>
      ),
    },
  ];

  const [selectedTabId, setSelectedTabId] = useState(tabs[0].id);

  const selectedTabContent = tabs.find((obj) => obj.id === selectedTabId)?.content;

  const onSelectedTabChanged = (id: string) => {
    setSelectedTabId(id);
  };

  return (
    <>
      <EuiTitle size="l">
        <h2>
          {i18n.translate('aiAssistantManagement.settingsPage.h2.settingsLabel', {
            defaultMessage: 'Settings',
          })}
        </h2>
      </EuiTitle>

      <EuiSpacer size="m" />

      <EuiTabs>
        {tabs.map((tab, index) => (
          <EuiTab
            key={index}
            onClick={() => onSelectedTabChanged(tab.id)}
            isSelected={tab.id === selectedTabId}
          >
            {tab.name}
          </EuiTab>
        ))}
      </EuiTabs>

      <EuiSpacer size="l" />

      {selectedTabContent}

      <EuiSpacer size="l" />
    </>
  );
}
